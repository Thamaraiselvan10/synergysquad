---
// src/components/UpcomingChallenges.astro

const challenges = [
    {
        title: 'National level coding competition',
        description: ' A national innovation marathon where the sharpest minds in technology unite to solve real-world challenges. Go beyond competitionâ€”Code. Create. Conquer.',
        posterUrl: '/upcoming/codeathon.jpeg',
        status: 'current'
    },
    {
        title: 'CODE-A-THAN Final round',
        description: 'The ultimate 8-hour coding challenge. Compete for the national title by solving complex algorithmic problems with speed and flawless execution',
        posterUrl: '/upcoming/codeathon.jpeg',
        status: 'upcoming'
    },
    {
        title: 'Mock Wipro NLTH Challenge',
        description: 'Test your skills in a simulated environment that mirrors the actual Wipro National Level Talent Hunt.',
        posterUrl: 'https://images.unsplash.com/photo-1550063873-ab792950096b?q=80&w=1887',
        status: 'upcoming'
    },
    {
        title: 'Week 1 - Pattern Day',
        description: 'The foundational challenge that kicked off our weekly series, focusing on complex pattern printing.',
        posterUrl: 'https://images.unsplash.com/photo-1526498460520-4c246339dcc4?q=80&w=2070',
        status: 'completed'
    }
];
---
<link rel="stylesheet" href="node_modules/@splidejs/splide/dist/css/splide.min.css">

<section class="upcoming-challenges fade-in-up">
    <div class="container">
        <h2 class="section-title">Challenges Updates</h2>
        
        <div id="challenges-slider" class="splide">
            <div class="splide__track">
                <ul class="splide__list">
                    {challenges.map(challenge => (
                        <li class="splide__slide">
                            <div class="challenge-card">
                                <div class="poster-container">
                                    <img src={challenge.posterUrl} alt={`Poster for ${challenge.title}`} class="challenge-poster" />
                                </div>
                                <div class="card-content">
                                    <div class="card-text">
                                        <h3>{challenge.title}</h3>
                                        <p>{challenge.description}</p>
                                    </div>
                                    
                                    <div class:list={['status-tag', challenge.status]}>
                                        <span class="status-dot"></span>
                                        <span class="status-text">
                                            {challenge.status.toUpperCase()} CHALLENGE
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    </div>
</section>

<style>
    .upcoming-challenges { padding: 5rem 1.5rem; overflow: hidden; }
    .container { max-width: 1200px; margin: auto; }

    /* --- START: NEW GLOWING TITLE STYLE --- */
    .section-title {
        font-size: 2.5rem;
        font-weight: 800;
        text-align: center;
        margin-bottom: 3rem;
        color: var(--primary-color);
        /* Animation definition */
        animation: pulse-glow 2.5s infinite ease-in-out;
    }

    @keyframes pulse-glow {
        0%, 100% {
            text-shadow: 0 0 10px rgba(30, 64, 175, 0.5), 0 0 20px rgba(30, 64, 175, 0.3);
        }
        50% {
            text-shadow: 0 0 20px rgba(30, 64, 175, 0.8), 0 0 40px rgba(30, 64, 175, 0.5);
        }
    }
    /* --- END: NEW GLOWING TITLE STYLE --- */
    
    .splide__slide { padding: 0.5rem; }
    .challenge-card { background-color: #fff; border-radius: 12px; border: 1px solid var(--border-color); box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.05), 0 2px 4px -2px rgb(0 0 0 / 0.05); display: flex; overflow: hidden; height: 100%; }
    .poster-container { flex: 0 0 200px; }
    .challenge-poster { width: 100%; height: 100%; object-fit: cover; }
    .card-content { padding: 1.5rem; display: flex; flex-direction: column; justify-content: space-between; }
    .card-content h3 { margin-top: 0; font-size: 1.25rem; font-weight: 700; }
    .card-content p { color: var(--text-secondary); line-height: 1.6; margin-bottom: 0; }
    .status-tag { display: flex; align-items: center; gap: 0.5rem; margin-top: 1rem; }
    .status-dot { width: 10px; height: 10px; border-radius: 50%; }
    .status-text { font-size: 0.8rem; font-weight: 700; letter-spacing: 0.05em; }
    .status-tag.current .status-dot { background-color: #10b981; box-shadow: 0 0 8px #10b981, 0 0 12px #10b981; animation: glow-animation 2s infinite ease-in-out; }
    .status-tag.current .status-text { color: #059669; }
    .status-tag.upcoming .status-dot { background-color: #f59e0b; box-shadow: 0 0 8px #f59e0b, 0 0 12px #f59e0b; animation: glow-animation 2s infinite ease-in-out; }
    .status-tag.upcoming .status-text { color: #b45309; }
    .status-tag.completed .status-dot { background-color: #9ca3af; }
    .status-tag.completed .status-text { color: #6b7280; }
    @keyframes glow-animation { 0%, 100% { opacity: 1; } 50% { opacity: 0.5; } }
    .splide__arrow { background-color: var(--primary-color); }
    .splide__arrow svg { fill: white; }
    .splide__pagination__page.is-active { background-color: var(--primary-color); }

    .fade-in-up { opacity: 0; transform: translateY(30px); transition: opacity 0.6s ease-out, transform 0.6s ease-out; }
    .fade-in-up.is-visible { opacity: 1; transform: translateY(0); }
</style>

<script>
    import Splide from '@splidejs/splide';

    document.addEventListener('DOMContentLoaded', () => {
        const splide = new Splide('#challenges-slider', {
            type: 'loop', perPage: 2, perMove: 1, gap: '1rem', pagination: true,
            arrows: true, breakpoints: { 1024: { perPage: 2, }, 768: { perPage: 1, }, },
        });
        splide.mount();

        const elementsToAnimate = document.querySelectorAll('.fade-in-up');
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('is-visible');
                    observer.unobserve(entry.target);
                }
            });
        }, { threshold: 0.1 });
        elementsToAnimate.forEach(element => {
            observer.observe(element);
        });
    });
</script>