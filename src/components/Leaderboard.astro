---
// src/components/Leaderboard.astro
const leaderboardData = [
 { "rank": 1, "name": "Dhineshkumar M ", "score": "711 / 800" },
    { "rank": 2, "name": "Subhashree V P ", "score": "646 / 800" },
    { "rank": 3, "name": "Aditya N V ", "score": "595 / 800" },
    { "rank": 4, "name": "Santhosh J V ", "score": "515 / 800" },
    { "rank": 5, "name": "Naveen Prasath M ", "score": "492 / 800" },
    { "rank": 6, "name": "Nishanth M ", "score": "485 / 800" },
    { "rank": 7, "name": "Kishore D ", "score": "476 / 800" },
    { "rank": 8, "name": "Sangeetha A ", "score": "470 / 800" },
    { "rank": 9, "name": "Dhanushiya S ", "score": "462 / 800" },
    { "rank": 10, "name": "Pradeepa S ", "score": "462 / 800" },
    { "rank": 11, "name": "Sudhakar S ", "score": "459 / 800" },
    { "rank": 12, "name": "Dinesh G ", "score": "453 / 800" },
    { "rank": 13, "name": "Veerasowndarya V", "score": "433 / 800" },
    { "rank": 14, "name": "Soundarya P ", "score": "421 / 800" },
    { "rank": 15, "name": "Giri N ", "score": "416 / 800" },
    { "rank": 16, "name": "Sanjay S ", "score": "413 / 800" },
    { "rank": 17, "name": "Damodara Prakash P ", "score": "411 / 800" },
    { "rank": 18, "name": "Shreesaran K ", "score": "409 / 800" }
];
---

<section class="leaderboard-section">
    <div class="container">
        <div class="section-header fade-in-up">
            <h2 class="section-title">Overall Leaderboard</h2>
            <p class="section-subtitle">
                Recognizing the consistent top performers across all challenges and seasons.
            </p>
        </div>

        <div class="leaderboard-container fade-in-up">
            <div class="leaderboard-header">
                <div class="header-item rank">Rank</div>
                <div class="header-item name">Student Name</div>
                <div class="header-item score">Total Score</div>
            </div>
            <div class="leaderboard-body">
                {leaderboardData.map(player => (
                    <div class="leaderboard-row" class:list={[{ 'top-three': player.rank <= 3 }]}>
                        <div class="row-item rank">
                            <span class="rank-label">Rank</span>
                            <span class="rank-value">#{player.rank}</span>
                        </div>
                        <div class="row-item name">{player.name}</div>
                        <div class="row-item score">
                            <span class="score-value">{player.score.toLocaleString()} PTS</span>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    </div>
</section>

<style>
    .leaderboard-section {
        padding: 6rem 1.5rem;
        background-color: var(--background-color);
    }
    .container { max-width: 800px; margin: auto; }
    
    /* --- START: RESTORED HEADER STYLES --- */
    .section-header { text-align: center; margin-bottom: 4rem; }
    .section-title {
        font-size: 2.75rem;
        font-weight: 900;
        margin-bottom: 1.5rem;
        position: relative;
        display: inline-block;
    }
    .section-title::after {
        content: '';
        position: absolute;
        bottom: -0.75rem;
        left: 50%;
        transform: translateX(-50%);
        height: 5px;
        width: 0;
        background: linear-gradient(90deg, var(--primary-color), #6366f1);
        border-radius: 5px;
        animation: grow-underline 1s ease-out forwards;
        animation-delay: 0.5s;
    }
    @keyframes grow-underline {
        to { width: 100px; }
    }
    .section-subtitle {
        max-width: 65ch;
        margin: auto;
        font-size: 1.125rem;
        color: var(--text-secondary);
        line-height: 1.8;
    }
    /* --- END: RESTORED HEADER STYLES --- */
    
    .leaderboard-container {
        background-color: #fff;
        border-radius: 12px;
        border: 1px solid var(--border-color);
        box-shadow: 0 10px 25px -5px rgb(0 0 0 / 0.05);
        overflow: hidden;
    }

    /* All responsive table styles are unchanged and correct */
    .leaderboard-header { display: none; }
    .leaderboard-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 0.5rem 1rem;
        padding: 1.25rem 1.5rem;
        border-top: 1px solid var(--border-color);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .leaderboard-row:first-child { border-top: none; }
    .leaderboard-row:hover { transform: scale(1.02); box-shadow: 0 10px 20px rgba(0,0,0,0.07); z-index: 10; position: relative; }
    .row-item.rank { grid-column: 1 / 2; display: flex; align-items: center; gap: 0.5rem; font-weight: 700; color: var(--text-primary); }
    .rank-label { display: none; }
    .rank-value { font-size: 1.125rem; }
    .row-item.name { grid-column: 1 / 3; grid-row: 2 / 3; font-weight: 500; color: var(--text-primary); }
    .row-item.score { grid-column: 2 / 3; grid-row: 1 / 2; text-align: right; font-weight: 700; color: var(--primary-color); }
    .leaderboard-row.top-three .rank-value, .leaderboard-row.top-three .name { font-weight: 700; color: var(--primary-color); }
    .leaderboard-row.top-three .rank-value { font-size: 1.25rem; }

    @media (min-width: 640px) {
        .leaderboard-header { display: grid; grid-template-columns: 100px 1fr 150px; gap: 1rem; padding: 1rem 1.5rem; background-color: #f8fafc; font-weight: 600; color: var(--text-secondary); font-size: 0.875rem; text-transform: uppercase; }
        .leaderboard-row { grid-template-columns: 100px 1fr 150px; padding: 1rem 1.5rem; }
        .row-item.name { grid-column: auto; grid-row: auto; }
        .row-item.score { grid-column: auto; grid-row: auto; }
    }

    .fade-in-up { opacity: 0; transform: translateY(30px); transition: opacity 0.6s ease-out, transform 0.6s ease-out; }
    .fade-in-up.is-visible { opacity: 1; transform: translateY(0); }
    .leaderboard-container.fade-in-up { transition-delay: 0.2s; }
</style>

<script>
    // The script is correct and unchanged
    document.addEventListener('DOMContentLoaded', () => {
        const elements = document.querySelectorAll('.fade-in-up');
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('is-visible');
                    observer.unobserve(entry.target);
                }
            });
        }, { threshold: 0.1 });
        elements.forEach(element => observer.observe(element));
    });
</script>